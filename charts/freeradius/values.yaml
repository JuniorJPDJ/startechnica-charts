## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
##
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""

## @section Common parameters

## @param kubeVersion Force target Kubernetes version (using Helm capabilities if not set)
##
kubeVersion: ""
## @param nameOverride String to partially override adminer.fullname
##
nameOverride: ""
## @param fullnameOverride String to fully override adminer.fullname
##
fullnameOverride: ""
## @param hostAliases Add deployment host aliases
## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
##
hostAliases: []
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
##
commonAnnotations: {}
## @param clusterDomain Default Kubernetes cluster domain
##
clusterDomain: cluster.local
## @param extraDeploy Array of extra objects to deploy with the release
##
extraDeploy: []

## Enable diagnostic mode in the deployment
##
diagnosticMode:
  ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
  ##
  enabled: false
  ## @param diagnosticMode.command Command to override all containers in the deployment
  ##
  command:
    - sleep
  ## @param diagnosticMode.args Args to override all containers in the deployment
  ##
  args:
    - infinity

## @section FreeRADIUS common parameters

## FreeRADIUS image
## ref: https://hub.docker.com/r/bitnami/mariadb/tags/
## @param image.registry FreeRADIUS image registry
## @param image.repository FreeRADIUS image repository
## @param image.tag FreeRADIUS image tag (immutable tags are recommended)
## @param image.pullPolicy FreeRADIUS image pull policy
## @param image.pullSecrets Specify docker-registry secret names as an array
## @param image.debug Specify if debug logs should be enabled
##
image:
  registry: docker.io
  repository: freeradius/freeradius-server
  tag: "3.0.25"
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## Example:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []
  ## Set to true if you would like to see extra information on logs
  ## It turns BASH and/or NAMI debugging in the image
  ##
  debug: false
## @param architecture FreeRADIUS architecture (`standalone` or `replication`)
##
architecture: standalone

configuration: ""
## @param existingConfigmap Name of existing ConfigMap with FreeRADIUS configuration
## NOTE: When it's set the configuration parameter is ignored
##
existingConfigmap: ""
## @param extraStartupArgs Extra default startup args
##
extraStartupArgs: ""
## @param initdbScripts Dictionary of initdb scripts
## Specify dictionary of scripts to be run at first boot
## ref: https://github.com/bitnami/bitnami-docker-FreeRADIUS#initializing-a-new-instance
## Example:
## initdbScripts:
##   my_init_script.sh: |
##      #!/bin/bash
##      echo "Do something."
##
initdbScripts: {}
## @param initdbScriptsConfigMap ConfigMap with the initdb scripts (Note: Overrides `initdbScripts`)
##
initdbScriptsConfigMap: ""

replicaCount: 1

## @param primary.command Override default container command on FreeRADIUS container(s) (useful when using custom images)
##
command: []
## @param primary.args Override default container args on FreeRADIUS container(s) (useful when using custom images)
##
args: []
## @param primary.lifecycleHooks for the FreeRADIUS container(s) to automate configuration before or after startup
##
lifecycleHooks: {}
## @param primary.hostAliases Add deployment host aliases
## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
##
hostAliases: []
## @param primary.configuration [string] FreeRADIUS configuration to be injected as ConfigMap
## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
##

## @param affinity Affinity for FreeRADIUS secondary pods assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
##
affinity: {}
## @param nodeSelector Node labels for FreeRADIUS secondary pods assignment
## Ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}
## @param tolerations Tolerations for FreeRADIUS secondary pods assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []
## @param topologySpreadConstraints Topology Spread Constraints for FreeRADIUS secondary pods assignment
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
## E.g.
## topologySpreadConstraints:
##   - maxSkew: 1
##     topologyKey: topology.kubernetes.io/zone
##     whenUnsatisfiable: DoNotSchedule
##
topologySpreadConstraints: {}
## @param priorityClassName Priority class for FreeRADIUS secondary pods assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
priorityClassName: ""
## @param schedulerName Name of the k8s scheduler (other than default)
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
schedulerName: ""
## @param podManagementPolicy podManagementPolicy to manage scaling operation of FreeRADIUS secondary pods
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
##
podManagementPolicy: ""
## FreeRADIUS secondary Pod security context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param podSecurityContext.enabled Enable security context for FreeRADIUS secondary pods
## @param podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
##
podSecurityContext:
  enabled: true
  fsGroup: 1001
## FreeRADIUS secondary container security context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
## @param containerSecurityContext.enabled FreeRADIUS secondary container securityContext
## @param containerSecurityContext.runAsUser User ID for the FreeRADIUS secondary container
## @param containerSecurityContext.runAsNonRoot Set Controller container's Security Context runAsNonRoot
##
containerSecurityContext:
  enabled: true
  runAsUser: 1001
  runAsNonRoot: true
## FreeRADIUS secondary container's resource requests and limits
## ref: https://kubernetes.io/docs/user-guide/compute-resources/
## We usually recommend not to specify default resources and to leave this as a conscious
## choice for the user. This also increases chances charts run on environments with little
## resources, such as Minikube. If you do want to specify resources, uncomment the following
## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
## @param resources.limits The resources limits for FreeRADIUS secondary containers
## @param resources.requests The requested resources for FreeRADIUS secondary containers
##
resources:
  ## Example:
  ## limits:
  ##    cpu: 100m
  ##    memory: 256Mi
  limits: {}
  ## Examples:
  ## requests:
  ##    cpu: 100m
  ##    memory: 256Mi
  requests: {}
## Configure extra options for FreeRADIUS Secondary containers' liveness, readiness and startup probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
## @param startupProbe.enabled Enable startupProbe
## @param startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
## @param startupProbe.periodSeconds Period seconds for startupProbe
## @param startupProbe.timeoutSeconds Timeout seconds for startupProbe
## @param startupProbe.failureThreshold Failure threshold for startupProbe
## @param startupProbe.successThreshold Success threshold for startupProbe
##
startupProbe:
  enabled: false
  initialDelaySeconds: 120
  periodSeconds: 15
  timeoutSeconds: 5
  failureThreshold: 10
  successThreshold: 1
## Configure extra options for liveness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param livenessProbe.enabled Enable livenessProbe
## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
## @param livenessProbe.periodSeconds Period seconds for livenessProbe
## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
## @param livenessProbe.failureThreshold Failure threshold for livenessProbe
## @param livenessProbe.successThreshold Success threshold for livenessProbe
##
livenessProbe:
  enabled: true
  initialDelaySeconds: 120
  periodSeconds: 60
  timeoutSeconds: 2
  failureThreshold: 3
  successThreshold: 1
## @param readinessProbe.enabled Enable readinessProbe
## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
## @param readinessProbe.periodSeconds Period seconds for readinessProbe
## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
## @param readinessProbe.failureThreshold Failure threshold for readinessProbe
## @param readinessProbe.successThreshold Success threshold for readinessProbe
##
readinessProbe:
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1
## @param customStartupProbe Override default startup probe for FreeRADIUS secondary containers
##
customStartupProbe: {}
## @param customLivenessProbe Override default liveness probe for FreeRADIUS secondary containers
##
customLivenessProbe: {}
## @param customReadinessProbe Override default readiness probe for FreeRADIUS secondary containers
##
customReadinessProbe: {}
## @param startupWaitOptions Override default builtin startup wait check options for FreeRADIUS secondary containers
## `bitnami/mariadb` Docker image has built-in startup check mechanism,
## which periodically checks if FreeRADIUS service has started up and stops it
## if all checks have failed after X tries. Use these to control these checks.
## ref: https://github.com/bitnami/bitnami-docker-mariadb/pull/240
## Example (with default options):
## startupWaitOptions:
##   retries: 300
##   waitTime: 2
##
startupWaitOptions: {}
## @param extraFlags FreeRADIUS secondary additional command line flags
## Can be used to specify command line flags, for example:
## E.g.
## extraFlags: "--max-connect-errors=1000 --max_connections=155"
##
extraFlags: ""
## @param extraEnvVars Extra environment variables to be set on FreeRADIUS secondary containers
## E.g.
## extraEnvVars:
##  - name: TZ
##    value: "Europe/Paris"
##
extraEnvVars: []
## @param extraEnvVarsCM Name of existing ConfigMap containing extra env vars for FreeRADIUS secondary containers
##
extraEnvVarsCM: ""
## @param extraEnvVarsSecret Name of existing Secret containing extra env vars for FreeRADIUS secondary containers
##
extraEnvVarsSecret: ""
## Enable persistence using Persistent Volume Claims
## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  ## @param persistence.enabled Enable persistence on FreeRADIUS secondary replicas using a `PersistentVolumeClaim`
  ##
  enabled: false
    ## @param persistence.existingClaim Name of an existing `PersistentVolumeClaim` for FreeRADIUS primary replicas
    ## NOTE: When it's set the rest of persistence parameters are ignored
    ##
  existingClaim: ""
  ## @param persistence.subPath Subdirectory of the volume to mount at
  ##
  subPath: ""
  ## @param persistence.storageClass FreeRADIUS secondary persistent volume storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ""
  ## @param persistence.annotations FreeRADIUS secondary persistent volume claim annotations
  ##
  annotations: {}
  ## @param persistence.accessModes FreeRADIUS secondary persistent volume access Modes
  ##
  accessModes:
    - ReadWriteOnce
  ## @param persistence.size FreeRADIUS secondary persistent volume size
  ##
  size: 8Gi
  ## @param persistence.selector Selector to match an existing Persistent Volume
  ## selector:
  ##   matchLabels:
  ##     app: my-app
  ##
  selector: {}
## @param extraVolumes Optionally specify extra list of additional volumes to the FreeRADIUS secondary pod(s)
##
extraVolumes: []
## @param extraVolumeMounts Optionally specify extra list of additional volumeMounts for the FreeRADIUS secondary container(s)
##
extraVolumeMounts: []
## @param initContainers Add additional init containers for the FreeRADIUS secondary pod(s)
##
initContainers: []
## @param sidecars Add additional sidecar containers for the FreeRADIUS secondary pod(s)
##
sidecars: []

service:
  ## @param service.type FreeRADIUS Kubernetes service type
  ##
  type: ClusterIP
  ## @param service.ports.auth FreeRADIUS Kubernetes service port
  ##
  ports:
    auth: 1812
    acct: 1813
    status: 18121
  ## @param service.nodePorts.mysql FreeRADIUS Kubernetes service node port
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ##
  nodePorts:
    auth: ""
    acct: ""
    status: ""
  ## @param service.clusterIP FreeRADIUS Kubernetes service clusterIP IP
  ##
  clusterIP: ""
  ## @param service.loadBalancerIP FreeRADIUS loadBalancerIP if service type is `LoadBalancer`
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
  ##
  loadBalancerIP: ""
  ## @param service.externalTrafficPolicy Enable client source IP preservation
  ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster
  ## @param service.loadBalancerSourceRanges Address that are allowed when FreeRADIUS service is LoadBalancer
  ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ## E.g.
  ## loadBalancerSourceRanges:
  ##   - 10.10.10.0/24
  ##
  loadBalancerSourceRanges: []
  ## @param service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
  ##
  extraPorts: []
  ## @param service.annotations Provide any additional annotations which may be required
  ##
  annotations: {}
  ## @param service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
  ## If "ClientIP", consecutive client requests will be directed to the same Pod
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
  ##
  sessionAffinity: None
  ## @param service.sessionAffinityConfig Additional settings for the sessionAffinity
  ## sessionAffinityConfig:
  ##   clientIP:
  ##     timeoutSeconds: 300
  sessionAffinityConfig: {}

## @param revisionHistoryLimit Maximum number of revisions that will be maintained in the Deployment
##
revisionHistoryLimit: 3

## @section RBAC parameter
## Specifies whether a ServiceAccount should be created
##
serviceAccount:
  ## @param serviceAccount.create Enable the creation of a ServiceAccount for FreeRADIUS pods
  ##
  create: true
  ## @param serviceAccount.name Name of the created ServiceAccount
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name: ""
  ## @param serviceAccount.automountServiceAccountToken Auto-mount the service account token in the pod
  ##
  automountServiceAccountToken: false


modsEnabled:
  sql:
    enabled: true
    dialect: mysql
    server: localhost
    port: 3306
    login: radius
    password: radius
    radiusdb: radiusdb
    tableClient: nas

sitesEnabled:
  status:
    port: 18121
    secret: adminsecret

mariadb:
  enabled: false

postgresql:
  enabled: false